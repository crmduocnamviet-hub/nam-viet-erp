import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Space,
  Typography,
  Modal,
  Form,
  Input,
  Select,
  InputNumber,
  Tag,
  Popconfirm,
  App,
  Row,
  Col,
  Statistic,
  Badge,
} from 'antd';
import {
  HomeOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  EyeOutlined,
  MedicineBoxOutlined,
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import {
  getRooms,
  createRoom,
  updateRoom,
  deleteRoom,
  getRoomStatistics,
  checkRoomNameExists,
  type Room,
  type CreateRoomData,
  type UpdateRoomData,
} from '@nam-viet-erp/services';

const { Title, Text } = Typography;
const { TextArea } = Input;

const roomTypeOptions = [
  { label: 'üè• Ph√≤ng Y t·∫ø', value: 'medical' },
  { label: 'üõå Ph√≤ng ƒêi·ªÅu tr·ªã', value: 'treatment' },
  { label: 'üë®‚Äç‚öïÔ∏è Ph√≤ng T∆∞ v·∫•n', value: 'consultation' },
  { label: 'üî¨ Ph√≤ng Ch·∫©n ƒëo√°n', value: 'diagnostic' },
  { label: 'üìã Kh√°c', value: 'other' },
];

const getRoomTypeDisplay = (type: Room['room_type']) => {
  const option = roomTypeOptions.find(opt => opt.value === type);
  return option ? option.label : type;
};

const RoomManagementPage: React.FC = () => {
  const { notification } = App.useApp();
  const [form] = Form.useForm();

  const [rooms, setRooms] = useState<Room[]>([]);
  const [statistics, setStatistics] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState<'create' | 'edit' | 'view'>('create');
  const [editingRoom, setEditingRoom] = useState<Room | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Load rooms and statistics
  const loadRoomsData = async () => {
    setLoading(true);
    try {
      const [roomsResponse, statsResponse] = await Promise.all([
        getRooms(),
        getRoomStatistics(),
      ]);

      if (roomsResponse.error) throw roomsResponse.error;
      if (statsResponse.error) throw statsResponse.error;

      setRooms(roomsResponse.data || []);
      setStatistics(statsResponse.data);
    } catch (error: any) {
      notification.error({
        message: 'L·ªói t·∫£i d·ªØ li·ªáu',
        description: error.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadRoomsData();
  }, []);

  // Handle create room
  const handleCreateRoom = () => {
    setModalMode('create');
    setEditingRoom(null);
    form.resetFields();
    setModalOpen(true);
  };

  // Handle edit room
  const handleEditRoom = (room: Room) => {
    setModalMode('edit');
    setEditingRoom(room);
    form.setFieldsValue({
      name: room.name,
      description: room.description,
      room_type: room.room_type,
      capacity: room.capacity,
      equipment: room.equipment,
      is_active: room.is_active,
    });
    setModalOpen(true);
  };

  // Handle view room
  const handleViewRoom = (room: Room) => {
    setModalMode('view');
    setEditingRoom(room);
    form.setFieldsValue({
      name: room.name,
      description: room.description,
      room_type: room.room_type,
      capacity: room.capacity,
      equipment: room.equipment,
      is_active: room.is_active,
    });
    setModalOpen(true);
  };

  // Handle delete room
  const handleDeleteRoom = async (roomId: string) => {
    try {
      const { error } = await deleteRoom(roomId);
      if (error) throw error;

      notification?.success({
        message: 'ƒê√£ x√≥a ph√≤ng',
        description: 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng',
      });

      await loadRoomsData();
    } catch (error: any) {
      notification.error({
        message: 'L·ªói x√≥a ph√≤ng',
        description: error.message || 'Kh√¥ng th·ªÉ x√≥a ph√≤ng',
      });
    }
  };

  // Handle form submission
  const handleSubmit = async (values: any) => {
    setIsSubmitting(true);
    try {
      // Check for duplicate name
      const { exists } = await checkRoomNameExists(
        values.name,
        editingRoom?.room_id
      );

      if (exists) {
        notification.error({
          message: 'T√™n ph√≤ng ƒë√£ t·ªìn t·∫°i',
          description: 'Vui l√≤ng ch·ªçn t√™n kh√°c cho ph√≤ng',
        });
        return;
      }

      if (modalMode === 'create') {
        const { error } = await createRoom(values as CreateRoomData);
        if (error) throw error;

        notification?.success({
          message: 'ƒê√£ t·∫°o ph√≤ng m·ªõi',
          description: 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
        });
      } else if (modalMode === 'edit' && editingRoom) {
        const { error } = await updateRoom(editingRoom.room_id, values as UpdateRoomData);
        if (error) throw error;

        notification?.success({
          message: 'ƒê√£ c·∫≠p nh·∫≠t ph√≤ng',
          description: 'Th√¥ng tin ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
        });
      }

      setModalOpen(false);
      await loadRoomsData();
    } catch (error: any) {
      notification.error({
        message: modalMode === 'create' ? 'L·ªói t·∫°o ph√≤ng' : 'L·ªói c·∫≠p nh·∫≠t ph√≤ng',
        description: error.message || 'C√≥ l·ªói x·∫£y ra',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const columns: ColumnsType<Room> = [
    {
      title: 'T√™n Ph√≤ng',
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record: Room) => (
        <Space>
          <HomeOutlined style={{ color: '#1890ff' }} />
          <Text strong>{name}</Text>
          {!record.is_active && (
            <Tag color="red">Ng∆∞ng ho·∫°t ƒë·ªông</Tag>
          )}
        </Space>
      ),
    },
    {
      title: 'Lo·∫°i Ph√≤ng',
      dataIndex: 'room_type',
      key: 'room_type',
      render: (type: Room['room_type']) => (
        <Tag color="blue">{getRoomTypeDisplay(type)}</Tag>
      ),
    },
    {
      title: 'S·ª©c Ch·ª©a',
      dataIndex: 'capacity',
      key: 'capacity',
      render: (capacity: number) => capacity ? `${capacity} ng∆∞·ªùi` : '‚Äî',
      align: 'center',
    },
    {
      title: 'Thi·∫øt B·ªã',
      dataIndex: 'equipment',
      key: 'equipment',
      render: (equipment: string[]) => (
        <div>
          {equipment && equipment.length > 0 ? (
            equipment.slice(0, 2).map((item, index) => (
              <Tag key={index} style={{ marginBottom: 2 }}>
                {item}
              </Tag>
            ))
          ) : (
            <Text type="secondary">Ch∆∞a c√≥</Text>
          )}
          {equipment && equipment.length > 2 && (
            <Tag>+{equipment.length - 2} kh√°c</Tag>
          )}
        </div>
      ),
    },
    {
      title: 'Tr·∫°ng Th√°i',
      dataIndex: 'is_active',
      key: 'is_active',
      render: (isActive: boolean) => (
        <Badge
          status={isActive ? 'success' : 'error'}
          text={isActive ? 'ƒêang ho·∫°t ƒë·ªông' : 'Ng∆∞ng ho·∫°t ƒë·ªông'}
        />
      ),
      align: 'center',
    },
    {
      title: 'Thao T√°c',
      key: 'action',
      render: (_, record: Room) => (
        <Space>
          <Button
            type="text"
            icon={<EyeOutlined />}
            onClick={() => handleViewRoom(record)}
            title="Xem chi ti·∫øt"
          />
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEditRoom(record)}
            title="Ch·ªânh s·ª≠a"
          />
          <Popconfirm
            title="X√≥a ph√≤ng"
            description="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√≤ng n√†y?"
            onConfirm={() => handleDeleteRoom(record.room_id)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button
              type="text"
              icon={<DeleteOutlined />}
              danger
              title="X√≥a"
            />
          </Popconfirm>
        </Space>
      ),
      align: 'center',
    },
  ];

  return (
    <div>
      {/* Header */}
      <div style={{ marginBottom: 24 }}>
        <Title level={2}>
          <MedicineBoxOutlined style={{ marginRight: 8, color: '#1890ff' }} />
          Qu·∫£n l√Ω Ph√≤ng
        </Title>
        <Text type="secondary">
          Qu·∫£n l√Ω c√°c ph√≤ng y t·∫ø, ƒëi·ªÅu tr·ªã v√† ch·∫©n ƒëo√°n trong h·ªá th·ªëng
        </Text>
      </div>

      {/* Statistics */}
      {statistics && (
        <Row gutter={16} style={{ marginBottom: 24 }}>
          <Col span={6}>
            <Card>
              <Statistic
                title="T·ªïng s·ªë ph√≤ng"
                value={statistics.total}
                prefix={<HomeOutlined />}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="ƒêang ho·∫°t ƒë·ªông"
                value={statistics.active}
                valueStyle={{ color: '#3f8600' }}
                prefix={<Badge status="success" />}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="Ng∆∞ng ho·∫°t ƒë·ªông"
                value={statistics.inactive}
                valueStyle={{ color: '#cf1322' }}
                prefix={<Badge status="error" />}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="Ph√≤ng Y t·∫ø"
                value={statistics.byType.medical || 0}
                prefix={<MedicineBoxOutlined />}
              />
            </Card>
          </Col>
        </Row>
      )}

      {/* Main Content */}
      <Card
        title="Danh s√°ch Ph√≤ng"
        extra={
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={handleCreateRoom}
          >
            Th√™m Ph√≤ng M·ªõi
          </Button>
        }
      >
        <Table
          columns={columns}
          dataSource={rooms}
          rowKey="room_id"
          loading={loading}
          pagination={{
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `${range[0]}-${range[1]} c·ªßa ${total} ph√≤ng`,
          }}
        />
      </Card>

      {/* Room Form Modal */}
      <Modal
        title={
          modalMode === 'create' ? 'üè• Th√™m Ph√≤ng M·ªõi' :
          modalMode === 'edit' ? '‚úèÔ∏è Ch·ªânh S·ª≠a Ph√≤ng' :
          'üëÅÔ∏è Th√¥ng Tin Ph√≤ng'
        }
        open={modalOpen}
        onCancel={() => setModalOpen(false)}
        footer={modalMode === 'view' ? [
          <Button key="close" onClick={() => setModalOpen(false)}>
            ƒê√≥ng
          </Button>
        ] : [
          <Button key="cancel" onClick={() => setModalOpen(false)}>
            H·ªßy
          </Button>,
          <Button
            key="submit"
            type="primary"
            loading={isSubmitting}
            onClick={() => form.submit()}
          >
            {modalMode === 'create' ? 'T·∫°o Ph√≤ng' : 'C·∫≠p Nh·∫≠t'}
          </Button>
        ]}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          disabled={modalMode === 'view'}
        >
          <Form.Item
            name="name"
            label="T√™n Ph√≤ng"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ph√≤ng' },
              { min: 2, message: 'T√™n ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±' },
            ]}
          >
            <Input
              placeholder="V√≠ d·ª•: Ph√≤ng Ti√™m Ch·ªßng, Ph√≤ng Si√™u √Çm"
              prefix={<HomeOutlined />}
            />
          </Form.Item>

          <Form.Item
            name="room_type"
            label="Lo·∫°i Ph√≤ng"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng' }]}
          >
            <Select placeholder="Ch·ªçn lo·∫°i ph√≤ng" options={roomTypeOptions} />
          </Form.Item>

          <Form.Item
            name="description"
            label="M√¥ T·∫£"
          >
            <TextArea
              rows={3}
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ ph√≤ng..."
              showCount
              maxLength={500}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="capacity"
                label="S·ª©c Ch·ª©a (s·ªë ng∆∞·ªùi)"
              >
                <InputNumber
                  min={1}
                  max={100}
                  placeholder="S·ªë ng∆∞·ªùi"
                  style={{ width: '100%' }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="is_active"
                label="Tr·∫°ng Th√°i"
                initialValue={true}
              >
                <Select>
                  <Select.Option value={true}>‚úÖ ƒêang ho·∫°t ƒë·ªông</Select.Option>
                  <Select.Option value={false}>‚ùå Ng∆∞ng ho·∫°t ƒë·ªông</Select.Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="equipment"
            label="Thi·∫øt B·ªã"
          >
            <Select
              mode="tags"
              placeholder="Nh·∫≠p t√™n thi·∫øt b·ªã v√† nh·∫•n Enter"
              style={{ width: '100%' }}
              options={[
                { label: 'M√°y si√™u √¢m', value: 'M√°y si√™u √¢m' },
                { label: 'M√°y X-quang', value: 'M√°y X-quang' },
                { label: 'M√°y ƒëo huy·∫øt √°p', value: 'M√°y ƒëo huy·∫øt √°p' },
                { label: 'Gi∆∞·ªùng kh√°m', value: 'Gi∆∞·ªùng kh√°m' },
                { label: 'T·ªß thu·ªëc', value: 'T·ªß thu·ªëc' },
                { label: 'M√°y ti·ªát tr√πng', value: 'M√°y ti·ªát tr√πng' },
              ]}
            />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default RoomManagementPage;