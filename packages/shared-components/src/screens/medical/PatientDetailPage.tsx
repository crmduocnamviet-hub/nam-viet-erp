import React, { useState, useEffect } from 'react';
import {
  Card,
  Row,
  Col,
  Avatar,
  Typography,
  Tabs,
  List,
  Input,
  Button,
  Spin,
  App,
  Modal,
  Tag,
  Descriptions,
  Form,
  DatePicker,
  Select,
  Breadcrumb,
  Space,
  Divider,
} from 'antd';
import {
  UserOutlined,
  SaveOutlined,
  CalendarOutlined,
  HistoryOutlined,
  EditOutlined,
  ArrowLeftOutlined,
  HomeOutlined,
} from '@ant-design/icons';
import {
  getProfileById,
  updateProfileNotes,
  getAppointmentsByPatientId,
  getPatientMedicalHistory,
  updatePatient,
} from '@nam-viet-erp/services';
import dayjs from 'dayjs';
import { useDebounce } from '@nam-viet-erp/shared-components';
const getErrorMessage = (error: any): string => {
  return error?.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';
};
import { useParams, useNavigate } from 'react-router-dom';

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;

const getStatusColor = (status: string) => {
  const colorMap: Record<string, string> = {
    'Ch∆∞a x√°c nh·∫≠n': 'default',
    'ƒê√£ x√°c nh·∫≠n': 'blue',
    'ƒê√£ check-in': 'green',
    'ƒêang kh√°m': 'gold',
    'ƒê√£ ho√†n t·∫•t/Ch·ªù thanh to√°n': 'purple',
    'H·ªßy/Kh√¥ng ƒë·∫øn': 'red',
  };
  return colorMap[status] || 'default';
};

const PatientDetailPage: React.FC = () => {
  const { patientId } = useParams<{ patientId: string }>();
  const navigate = useNavigate();
  const { notification } = App.useApp();
  const [form] = Form.useForm();

  const [profile, setProfile] = useState<any | null>(null);
  const [appointments, setAppointments] = useState<any[]>([]);
  const [serviceHistory, setServiceHistory] = useState<any[]>([]);
  const [notes, setNotes] = useState('');
  const [loading, setLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const debouncedNotes = useDebounce(notes, 500);

  useEffect(() => {
    if (patientId) {
      const fetchData = async () => {
        setLoading(true);
        try {
          const [profileRes, appointmentsRes, serviceHistoryRes] = await Promise.all([
            getProfileById(patientId),
            getAppointmentsByPatientId(patientId),
            getPatientMedicalHistory(patientId),
          ]);

          if (profileRes.error) throw profileRes.error;
          if (appointmentsRes.error) throw appointmentsRes.error;
          if (serviceHistoryRes.error) throw serviceHistoryRes.error;

          setProfile(profileRes.data);
          setAppointments(appointmentsRes.data || []);
          setServiceHistory(serviceHistoryRes.data || []);
          setNotes(profileRes.data?.receptionist_notes || '');

          // Populate form with patient data
          form.setFieldsValue({
            full_name: profileRes.data?.full_name || '',
            phone_number: profileRes.data?.phone_number || '',
            date_of_birth: profileRes.data?.date_of_birth ? dayjs(profileRes.data.date_of_birth) : null,
            gender: profileRes.data?.gender || '',
            address: profileRes.data?.address || '',
            allergy_notes: profileRes.data?.allergy_notes || '',
            chronic_diseases: profileRes.data?.chronic_diseases || '',
            is_b2b_customer: profileRes.data?.is_b2b_customer || false,
          });
        } catch (error: unknown) {
          notification.error({
            message: 'L·ªói t·∫£i d·ªØ li·ªáu b·ªánh nh√¢n',
            description: getErrorMessage(error),
          });
        } finally {
          setLoading(false);
        }
      };
      fetchData();
    }
  }, [patientId, notification, form]);

  const handleSaveNotes = async () => {
    if (!patientId) return;
    setIsSaving(true);
    try {
      const { error } = await updateProfileNotes(patientId, debouncedNotes);
      if (error) throw error;
      notification?.success({ message: 'ƒê√£ l∆∞u ghi ch√∫!' });
    } catch (error: unknown) {
      notification.error({
        message: 'L·ªói l∆∞u ghi ch√∫',
        description: getErrorMessage(error),
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleUpdatePatient = async (values: any) => {
    if (!patientId) return;
    setIsUpdating(true);
    try {
      const updateData = {
        ...values,
        date_of_birth: values.date_of_birth ? values.date_of_birth.format('YYYY-MM-DD') : null,
      };

      const { error } = await updatePatient(patientId, updateData);
      if (error) throw error;

      // Update local profile state
      setProfile((prev: any | null) => ({ ...prev, ...updateData }));
      setIsEditing(false);
      setHasUnsavedChanges(false);

      notification?.success({ message: 'ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n!' });
    } catch (error: unknown) {
      notification.error({
        message: 'L·ªói c·∫≠p nh·∫≠t th√¥ng tin',
        description: getErrorMessage(error),
      });
    } finally {
      setIsUpdating(false);
    }
  };

  const handleCancelEdit = () => {
    if (hasUnsavedChanges) {
      Modal.confirm({
        title: 'B·ªè c√°c thay ƒë·ªïi?',
        content: 'B·∫°n c√≥ thay ƒë·ªïi ch∆∞a l∆∞u. B·∫°n c√≥ ch·∫Øc mu·ªën b·ªè c√°c thay ƒë·ªïi n√†y?',
        okText: 'B·ªè thay ƒë·ªïi',
        cancelText: 'Ti·∫øp t·ª•c ch·ªânh s·ª≠a',
        onOk: () => {
          setIsEditing(false);
          setHasUnsavedChanges(false);
          // Reset form to original values
          form.setFieldsValue({
            full_name: profile?.full_name || '',
            phone_number: profile?.phone_number || '',
            date_of_birth: profile?.date_of_birth ? dayjs(profile.date_of_birth) : null,
            gender: profile?.gender || '',
            address: profile?.address || '',
            allergy_notes: profile?.allergy_notes || '',
            chronic_diseases: profile?.chronic_diseases || '',
            is_b2b_customer: profile?.is_b2b_customer || false,
          });
        }
      });
    } else {
      setIsEditing(false);
      setHasUnsavedChanges(false);
    }
  };

  if (loading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '400px'
      }}>
        <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin b·ªánh nh√¢n...">
          <div style={{ minHeight: "200px" }} />
        </Spin>
      </div>
    );
  }

  if (!profile) {
    return (
      <Card>
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <Title level={3}>Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n</Title>
          <Button type="primary" onClick={() => navigate(-1)} icon={<ArrowLeftOutlined />}>
            Quay l·∫°i
          </Button>
        </div>
      </Card>
    );
  }

  return (
    <div>
      {/* Breadcrumb Navigation */}
      <Card style={{ marginBottom: 16 }}>
        <Breadcrumb>
          <Breadcrumb.Item>
            <HomeOutlined />
            <span onClick={() => navigate('/')} style={{ cursor: 'pointer', marginLeft: 8 }}>
              Trang ch·ªß
            </span>
          </Breadcrumb.Item>
          <Breadcrumb.Item>
            <span onClick={() => navigate('/patients')} style={{ cursor: 'pointer' }}>
              Qu·∫£n l√Ω b·ªánh nh√¢n
            </span>
          </Breadcrumb.Item>
          <Breadcrumb.Item>{profile.full_name}</Breadcrumb.Item>
        </Breadcrumb>

        <div style={{ marginTop: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Title level={2} style={{ margin: 0 }}>
            üìã H·ªì s∆° b·ªánh nh√¢n: {profile.full_name}
          </Title>
          <Button
            icon={<ArrowLeftOutlined />}
            onClick={() => navigate(-1)}
          >
            Quay l·∫°i
          </Button>
        </div>
      </Card>

      {/* Main Content */}
      <Row gutter={[24, 24]}>
        {/* Left Column - Patient Info */}
        <Col xs={24} lg={8}>
          <Card title="Th√¥ng tin c√° nh√¢n" extra={
            <Button
              type={isEditing ? "default" : "primary"}
              icon={<EditOutlined />}
              onClick={() => {
                setIsEditing(!isEditing);
                setHasUnsavedChanges(false);
              }}
            >
              {isEditing ? 'H·ªßy ch·ªânh s·ª≠a' : 'Ch·ªânh s·ª≠a'}
            </Button>
          }>
            <div style={{ textAlign: 'center', marginBottom: 24 }}>
              <Avatar
                size={128}
                src={profile.avatar_url}
                icon={<UserOutlined />}
              />
              <Title level={4} style={{ marginTop: 16 }}>
                {profile.full_name}
              </Title>
              <Text type="secondary">{profile.phone_number}</Text>
            </div>

            {isEditing ? (
              <Form
                form={form}
                layout="vertical"
                onFinish={handleUpdatePatient}
                onValuesChange={() => setHasUnsavedChanges(true)}
              >
                <Form.Item
                  name="full_name"
                  label="H·ªç v√† t√™n"
                  rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n' },
                    { min: 2, message: 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±' }
                  ]}
                >
                  <Input placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß" />
                </Form.Item>

                <Form.Item
                  name="phone_number"
                  label="S·ªë ƒëi·ªán tho·∫°i"
                  rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
                    { pattern: /^[0-9]{10,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë' }
                  ]}
                >
                  <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (10-11 ch·ªØ s·ªë)" />
                </Form.Item>

                <Form.Item name="date_of_birth" label="Ng√†y sinh">
                  <DatePicker
                    style={{ width: '100%' }}
                    format="DD/MM/YYYY"
                    placeholder="Ch·ªçn ng√†y sinh"
                    disabledDate={(current) => current && current.isAfter(dayjs(), 'day')}
                  />
                </Form.Item>

                <Form.Item name="gender" label="Gi·ªõi t√≠nh">
                  <Select placeholder="Ch·ªçn gi·ªõi t√≠nh" allowClear>
                    <Select.Option value="Nam">üë® Nam</Select.Option>
                    <Select.Option value="N·ªØ">üë© N·ªØ</Select.Option>
                    <Select.Option value="Kh√°c">ü§∑ Kh√°c</Select.Option>
                  </Select>
                </Form.Item>

                <Form.Item name="address" label="ƒê·ªãa ch·ªâ">
                  <Input.TextArea
                    rows={2}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ th∆∞·ªùng tr√∫"
                    showCount
                    maxLength={200}
                  />
                </Form.Item>

                <Form.Item name="allergy_notes" label="Ghi ch√∫ d·ªã ·ª©ng">
                  <Input.TextArea
                    rows={2}
                    placeholder="Ghi ch√∫ c√°c lo·∫°i thu·ªëc, th·ª±c ph·∫©m d·ªã ·ª©ng..."
                    showCount
                    maxLength={500}
                  />
                </Form.Item>

                <Form.Item name="chronic_diseases" label="B·ªánh m√£n t√≠nh">
                  <Input.TextArea
                    rows={2}
                    placeholder="Ghi ch√∫ c√°c b·ªánh m√£n t√≠nh ƒëang ƒëi·ªÅu tr·ªã..."
                    showCount
                    maxLength={500}
                  />
                </Form.Item>

                <Divider />

                <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
                  <Button onClick={handleCancelEdit}>
                    H·ªßy
                  </Button>
                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={isUpdating}
                    icon={<SaveOutlined />}
                  >
                    L∆∞u thay ƒë·ªïi
                  </Button>
                </Space>
              </Form>
            ) : (
              <Descriptions
                bordered
                column={1}
                size="small"
                style={{
                  backgroundColor: '#fafafa',
                  border: '1px solid #f0f0f0',
                  borderRadius: 8
                }}
              >
                <Descriptions.Item label="üìÖ Ng√†y sinh">
                  <Text strong>
                    {profile.date_of_birth
                      ? dayjs(profile.date_of_birth).format('DD/MM/YYYY')
                      : <Text type="secondary">Ch∆∞a c·∫≠p nh·∫≠t</Text>}
                  </Text>
                </Descriptions.Item>
                <Descriptions.Item label="üë§ Gi·ªõi t√≠nh">
                  <Text strong>
                    {profile.gender ? (
                      profile.gender === 'Nam' ? 'üë® Nam' :
                      profile.gender === 'N·ªØ' ? 'üë© N·ªØ' : 'ü§∑ Kh√°c'
                    ) : <Text type="secondary">Ch∆∞a c·∫≠p nh·∫≠t</Text>}
                  </Text>
                </Descriptions.Item>
                <Descriptions.Item label="üè† ƒê·ªãa ch·ªâ">
                  <Text>
                    {profile.address || <Text type="secondary">Ch∆∞a c·∫≠p nh·∫≠t</Text>}
                  </Text>
                </Descriptions.Item>
                <Descriptions.Item label="‚ö†Ô∏è D·ªã ·ª©ng">
                  <Text>
                    {profile.allergy_notes ? (
                      <Text style={{ color: '#ff4d4f' }}>{profile.allergy_notes}</Text>
                    ) : (
                      <Text type="secondary">Kh√¥ng c√≥</Text>
                    )}
                  </Text>
                </Descriptions.Item>
                <Descriptions.Item label="üè• B·ªánh m√£n t√≠nh">
                  <Text>
                    {profile.chronic_diseases ? (
                      <Text style={{ color: '#faad14' }}>{profile.chronic_diseases}</Text>
                    ) : (
                      <Text type="secondary">Kh√¥ng c√≥</Text>
                    )}
                  </Text>
                </Descriptions.Item>
              </Descriptions>
            )}
          </Card>
        </Col>

        {/* Right Column - Appointments & History */}
        <Col xs={24} lg={16}>
          <Card>
            <Tabs
              defaultActiveKey="1"
              items={[
                {
                  key: "1",
                  label: <><CalendarOutlined /> L·ªãch s·ª≠ H·∫πn ({appointments.length})</>,
                  children: (
                    <List
                      dataSource={appointments}
                      renderItem={(item) => (
                        <List.Item
                          style={{
                            border: '1px solid #f0f0f0',
                            borderRadius: 8,
                            marginBottom: 8,
                            padding: 16
                          }}
                        >
                          <List.Item.Meta
                            avatar={<CalendarOutlined style={{ fontSize: 16, color: '#1890ff' }} />}
                            title={
                              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <span>{dayjs(item.appointment_time).format('DD/MM/YYYY HH:mm')}</span>
                                <Tag color={getStatusColor(item.status)}>{item.status}</Tag>
                              </div>
                            }
                            description={
                              <div>
                                <div><strong>D·ªãch v·ª•:</strong> {item.service || 'N/A'}</div>
                                {item.note && (
                                  <div style={{ marginTop: 8, padding: 8, backgroundColor: '#f6f6f6', borderRadius: 4 }}>
                                    <strong>Ghi ch√∫:</strong> {item.note}
                                  </div>
                                )}
                              </div>
                            }
                          />
                        </List.Item>
                      )}
                    />
                  )
                },
                {
                  key: "2",
                  label: <><HistoryOutlined /> L·ªãch s·ª≠ S·ª≠ d·ª•ng D·ªãch v·ª• ({serviceHistory.length})</>,
                  children: (
                    <List
                      dataSource={serviceHistory}
                      renderItem={(item) => (
                        <List.Item
                          style={{
                            border: '1px solid #f0f0f0',
                            borderRadius: 8,
                            marginBottom: 8,
                            padding: 16
                          }}
                        >
                          <List.Item.Meta
                            avatar={<HistoryOutlined style={{ fontSize: 16, color: '#52c41a' }} />}
                            title={
                              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <span>{item.services?.name || 'D·ªãch v·ª• kh√¥ng x√°c ƒë·ªãnh'}</span>
                                {item.services?.price && (
                                  <Text strong style={{ color: '#52c41a' }}>
                                    {new Intl.NumberFormat('vi-VN', {
                                      style: 'currency',
                                      currency: 'VND'
                                    }).format(item.services.price)}
                                  </Text>
                                )}
                              </div>
                            }
                            description={
                              <div>
                                <div>
                                  <strong>Ng√†y s·ª≠ d·ª•ng:</strong> {
                                    item.appointments?.appointment_time
                                      ? dayjs(item.appointments.appointment_time).format('DD/MM/YYYY HH:mm')
                                      : dayjs(item.created_at).format('DD/MM/YYYY HH:mm')
                                  }
                                </div>
                                {item.quantity && <div><strong>S·ªë l∆∞·ª£ng:</strong> {item.quantity}</div>}
                                {item.notes && (
                                  <div style={{ marginTop: 8, padding: 8, backgroundColor: '#f6f6f6', borderRadius: 4 }}>
                                    <strong>Ghi ch√∫:</strong> {item.notes}
                                  </div>
                                )}
                              </div>
                            }
                          />
                        </List.Item>
                      )}
                    />
                  )
                },
                {
                  key: "3",
                  label: <><EditOutlined /> Ghi ch√∫ L·ªÖ t√¢n</>,
                  children: (
                    <>
                      <div style={{ background: '#f9f9f9', padding: 16, borderRadius: 8, marginBottom: 16 }}>
                        <Paragraph style={{ margin: 0, color: '#666' }}>
                          üìù Ghi l·∫°i c√°c th√¥ng tin phi y t·∫ø quan tr·ªçng (v√≠ d·ª•: s·ªü th√≠ch,
                          l∆∞u √Ω khi giao ti·∫øp, ng∆∞·ªùi nh√† c·∫ßn li√™n h·ªá...).
                        </Paragraph>
                      </div>
                      <TextArea
                        rows={12}
                        value={notes}
                        onChange={(e) => setNotes(e.target.value)}
                        placeholder="Nh·∫≠p ghi ch√∫ v·ªÅ b·ªánh nh√¢n..."
                        style={{ borderRadius: 8 }}
                      />
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: 16 }}>
                        <Text type="secondary" style={{ fontSize: 12 }}>
                          Ghi ch√∫ s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông l∆∞u sau 500ms
                        </Text>
                        <Button
                          type="primary"
                          icon={<SaveOutlined />}
                          loading={isSaving}
                          onClick={handleSaveNotes}
                          disabled={notes === (profile?.receptionist_notes || '')}
                        >
                          L∆∞u ghi ch√∫
                        </Button>
                      </div>
                    </>
                  )
                }
              ]}
            />
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default PatientDetailPage;